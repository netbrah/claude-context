name: Release Standalone Bundle

# Creates official standalone bundle releases
# Triggered by pushing standalone-* tags (e.g., standalone-v0.1.3)

on:
  push:
    tags:
      - 'standalone-v*'
      - 'bundle-v*'
  
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag (e.g., standalone-v0.1.3)'
        required: true
        type: string
      mark_latest:
        description: 'Mark as latest release'
        required: false
        type: boolean
        default: false

jobs:
  release-standalone:
    name: Release Standalone Bundle
    runs-on: ubuntu-22.04
    timeout-minutes: 40
    
    permissions:
      contents: write
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.2'
          cache: 'pnpm'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            python3 \
            gcc \
            g++ \
            make \
            tree \
            jq

      - name: Install Node dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: |
          pnpm run build:core
          pnpm run build:mcp

      - name: Run tests
        run: pnpm test:core
        continue-on-error: true

      - name: Create standalone bundle with prebuilds
        id: bundle
        run: |
          echo "📦 Creating complete standalone bundle (includes Perl parser build)..."
          pnpm run bundle:full
          
          BUNDLE_FILE=$(find bundle-output -name "claude-context-standalone-*.tar.gz" -type f | head -1)
          echo "bundle_file=$BUNDLE_FILE" >> $GITHUB_OUTPUT
          echo "bundle_name=$(basename $BUNDLE_FILE)" >> $GITHUB_OUTPUT
          
          # Create a version-tagged copy
          TAG_NAME="${{ github.ref_name }}"
          VERSION="${TAG_NAME#standalone-v}"
          VERSION="${VERSION#bundle-v}"
          VERSIONED_BUNDLE="bundle-output/claude-context-standalone-v${VERSION}.tar.gz"
          cp "$BUNDLE_FILE" "$VERSIONED_BUNDLE"
          
          echo "versioned_bundle=$VERSIONED_BUNDLE" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          echo "✅ Bundles created:"
          ls -lh "$BUNDLE_FILE"
          ls -lh "$VERSIONED_BUNDLE"

      - name: Generate checksums
        id: checksums
        run: |
          cd bundle-output
          
          # Generate SHA256 checksums
          sha256sum claude-context-standalone-*.tar.gz > checksums.txt
          
          # Also checksum the Perl parser
          if [ -d ../prebuilds ]; then
            cd ../prebuilds
            sha256sum *.node >> ../bundle-output/checksums.txt || true
            cd ../bundle-output
          fi
          
          echo "✅ Checksums generated:"
          cat checksums.txt
          
          echo "checksums_file=bundle-output/checksums.txt" >> $GITHUB_OUTPUT

      - name: Extract changelog
        id: changelog
        run: |
          # Try to extract changelog for this version
          VERSION="${{ steps.bundle.outputs.version }}"
          
          if [ -f "CHANGELOG.md" ]; then
            # Extract section for this version
            awk "/## \[?${VERSION}\]?/,/## \[?[0-9]/" CHANGELOG.md > version-changelog.md
          fi
          
          # If no changelog, generate from commits
          if [ ! -s version-changelog.md ]; then
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$PREV_TAG" ]; then
              git log --pretty=format:"- %s (%an)" ${PREV_TAG}..HEAD > version-changelog.md
            else
              git log --pretty=format:"- %s (%an)" -20 > version-changelog.md
            fi
          fi

      - name: Generate release notes
        run: |
          VERSION="${{ steps.bundle.outputs.version }}"
          BUNDLE_SIZE=$(du -h ${{ steps.bundle.outputs.versioned_bundle }} | cut -f1)
          
          cat > release-notes.md << EOF
          ## 📦 Standalone Bundle v${VERSION}
          
          Complete offline installation package for Claude Context MCP server.
          
          ### 🎯 Target Environment
          
          - **OS**: RHEL/Rocky Linux 9.6 or compatible Linux distributions
          - **Architecture**: x86_64 (64-bit)
          - **Node.js**: v20.19.2 (compatible with v20.x)
          - **Kernel**: 5.14.0 or newer
          
          ### 📦 What's Included
          
          This bundle contains everything needed for a complete offline installation:
          
          - ✅ **Core Engine** (\`@zilliz/claude-context-core v${VERSION}\`)
            - AST-based code splitting for 15+ languages
            - Vector database integration (Milvus/Zilliz Cloud)
            - Embedding provider support (OpenAI, Gemini, Ollama, VoyageAI)
          
          - ✅ **MCP Server** (\`@zilliz/claude-context-mcp v${VERSION}\`)
            - Model Context Protocol integration
            - Semantic code search tools
            - Codebase indexing and management
          
          - ✅ **Native Modules**
            - Tree-sitter Perl parser (pre-compiled for x86_64 Linux)
            - All other tree-sitter parsers bundled
          
          - ✅ **All Dependencies**
            - Complete dependency tree (no npm install required)
            - LangChain, OpenAI SDK, Milvus SDK
            - Zero network calls during installation
          
          ### 🚀 Installation
          
          #### Basic Installation
          
          \`\`\`bash
          # Download and extract
          tar -xzf claude-context-standalone-v${VERSION}.tar.gz
          cd claude-context-standalone
          
          # Install to default location (~/.mcp/claude-context)
          ./install.sh
          \`\`\`
          
          #### With faiss-node Prebuild
          
          If you have a faiss-node prebuild for Linux x86_64:
          
          \`\`\`bash
          FAISS_PREBUILD=/path/to/faiss-node-v0.5.1-napi-v8-linux-x64.tar.gz \\
            ./install.sh /your/install/path
          \`\`\`
          
          #### Custom Installation Path
          
          \`\`\`bash
          ./install.sh /custom/installation/path
          \`\`\`
          
          ### 🔧 MCP Configuration
          
          After installation, add to your MCP client configuration:
          
          \`\`\`json
          {
            "mcpServers": {
              "claude-context": {
                "command": "/path/to/installation/node_modules/.bin/claude-context-mcp",
                "args": [],
                "env": {
                  "OPENAI_API_KEY": "your-api-key",
                  "EMBEDDING_PROVIDER": "OpenAI",
                  "EMBEDDING_MODEL": "text-embedding-3-large",
                  "MILVUS_ADDRESS": "localhost:19530",
                  "MILVUS_TOKEN": "",
                  "SPLITTER_TYPE": "ast",
                  "CHUNK_SIZE": "1000",
                  "CHUNK_OVERLAP": "200"
                }
              }
            }
          }
          \`\`\`
          
          ### 📊 Bundle Information
          
          - **Version**: v${VERSION}
          - **Bundle Size**: ${BUNDLE_SIZE}
          - **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Node.js**: $(node --version)
          - **Commit**: ${{ github.sha }}
          
          ### 📚 Documentation
          
          - **[Quick Start Guide](https://github.com/${{ github.repository }}/blob/master/docs/OFFLINE_INSTALL_QUICKSTART.md)** - Fast setup for your environment
          - **[Complete Bundle Guide](https://github.com/${{ github.repository }}/blob/master/docs/STANDALONE_BUNDLE.md)** - Detailed documentation
          - **[Perl Parser Build](https://github.com/${{ github.repository }}/blob/master/docs/BUILD_TREE_SITTER_PERL.md)** - Native module compilation
          - **[Troubleshooting](https://github.com/${{ github.repository }}/blob/master/docs/troubleshooting/troubleshooting-guide.md)** - Common issues and solutions
          
          ### 🔐 Verification
          
          Verify download integrity using SHA256 checksums:
          
          \`\`\`bash
          sha256sum -c checksums.txt
          \`\`\`
          
          ### ✨ What's New
          
          EOF
          
          # Append changelog if available
          if [ -f version-changelog.md ] && [ -s version-changelog.md ]; then
            cat version-changelog.md >> release-notes.md
          else
            echo "See commit history for changes in this release." >> release-notes.md
          fi
          
          cat >> release-notes.md << EOF
          
          ### 🆘 Support
          
          - **Issues**: https://github.com/${{ github.repository }}/issues
          - **Discussions**: https://github.com/${{ github.repository }}/discussions
          - **Documentation**: https://github.com/${{ github.repository }}/tree/master/docs
          
          ### ⚠️ Important Notes
          
          1. **Offline Installation**: No internet connection required after download
          2. **Node.js Version**: Must use Node.js 20.x (not compatible with 24+)
          3. **Native Modules**: Perl parser included; faiss-node requires separate prebuild
          4. **Compatibility**: Built on Ubuntu 22.04, compatible with RHEL/Rocky Linux 9.6
          
          ---
          
          **Enjoy offline semantic code search with Claude Context!** 🚀
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: "📦 Standalone Bundle ${{ github.event.inputs.tag_name || github.ref_name }}"
          body_path: release-notes.md
          draft: false
          prerelease: false
          make_latest: ${{ github.event.inputs.mark_latest || false }}
          files: |
            ${{ steps.bundle.outputs.versioned_bundle }}
            bundle-output/claude-context-standalone/README.md
            bundle-output/claude-context-standalone/install.sh
            prebuilds/*.node
            ${{ steps.checksums.outputs.checksums_file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: standalone-bundle-v${{ steps.bundle.outputs.version }}
          path: |
            ${{ steps.bundle.outputs.versioned_bundle }}
            bundle-output/claude-context-standalone/README.md
            prebuilds/*.node
            bundle-output/checksums.txt
          retention-days: 90

      - name: Generate workflow summary
        run: |
          VERSION="${{ steps.bundle.outputs.version }}"
          BUNDLE_SIZE=$(du -h ${{ steps.bundle.outputs.versioned_bundle }} | cut -f1)
          
          echo "## 🎉 Standalone Bundle v${VERSION} Released!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: \`${{ github.event.inputs.tag_name || github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Size**: ${BUNDLE_SIZE}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js**: $(node --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Download" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Page**: https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.tag_name || github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle**: \`claude-context-standalone-v${VERSION}.tar.gz\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Checksums**: \`checksums.txt\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Included Components" >> $GITHUB_STEP_SUMMARY
          echo "- Core engine (v${VERSION})" >> $GITHUB_STEP_SUMMARY
          echo "- MCP server (v${VERSION})" >> $GITHUB_STEP_SUMMARY
          echo "- Tree-sitter Perl parser (x86_64 Linux)" >> $GITHUB_STEP_SUMMARY
          echo "- All JavaScript dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- Installation scripts and documentation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Quick Start" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "tar -xzf claude-context-standalone-v${VERSION}.tar.gz" >> $GITHUB_STEP_SUMMARY
          echo "cd claude-context-standalone" >> $GITHUB_STEP_SUMMARY
          echo "./install.sh" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📚 Documentation" >> $GITHUB_STEP_SUMMARY
          echo "- [Quick Start](https://github.com/${{ github.repository }}/blob/master/docs/OFFLINE_INSTALL_QUICKSTART.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Full Guide](https://github.com/${{ github.repository }}/blob/master/docs/STANDALONE_BUNDLE.md)" >> $GITHUB_STEP_SUMMARY
